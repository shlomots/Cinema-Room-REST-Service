type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/Exceptions/ThisSeatIsAllreadyBoughtException.java
  visible: true
  text: |
    package cinema.Exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class ThisSeatIsAllreadyBoughtException extends RuntimeException{
        public ThisSeatIsAllreadyBoughtException(String cause){
            super(cause);
        }

        public ThisSeatIsAllreadyBoughtException(String message, Throwable cause) {
            super(message, cause);
        }
    }
  learner_created: true
- name: src/cinema/TaskController.java
  visible: true
  text: |+
    package cinema;
    import cinema.Exceptions.ApiException;
    import cinema.Exceptions.ThisSeatIsAllreadyBoughtException;
    import org.jetbrains.annotations.Nullable;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.HashMap;



    @RestController
    public class TaskController {
        Room room = new Room();
        @GetMapping("/seats")
        public HashMap<String, Object> returnOne() {
            HashMap<String, Object> output = new HashMap<>();
            output.put("total_rows", 9);
            output.put("total_columns" , 9);
            output.put("available_seats",room.getAvailableSeats());
            return output;
        }

        @PostMapping("/purchase")
        public Seats purchaseSeat(@RequestBody PurchaseInfo purchaseInfo){
            if(purchaseInfo.getRow() < 0 || 9 < purchaseInfo.getRow() || purchaseInfo.getColumn() < 0 || purchaseInfo.getColumn() > 9){
                throw new ThisSeatIsAllreadyBoughtException("The number of a row or a column is out of bounds!");
            }
            for(int i = 0 ; i < room.getSeats().size(); i++ ){
                Seats seat = room.getSeats().get(i);
                if(seat.getRow() == purchaseInfo.row && seat.getColumn() == purchaseInfo.column){
                    if(!seat.isPurchased()){
                        seat.setPurchased();
                        return seat;
                    }else{
                        throw new ThisSeatIsAllreadyBoughtException("The ticket has been already purchased!");
                    }
                }

            }
            return null;
        }



        }





  learner_created: true
- name: src/resources/static/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Main</title>
    </head>
    <body>
    <h1>Hey Amit! <3 </h1>
    </body>
    </html>
  learner_created: true
- name: src/cinema/PurchaseInfo.java
  visible: true
  text: |
    package cinema;

    public class PurchaseInfo {
        int row;
        int column;

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/Seats.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Seats {

        private int row;
        int column;
        private int price;
        @JsonIgnore
        boolean purchased = false;

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public boolean isPurchased(){
            return purchased;
        }

        public void setPurchased(){
            purchased = true;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public Seats(int row, int column) {
            this.row = row;
            this.column = column;
            if(row <= 4){
                setPrice(10);
            }else setPrice(8);
        }


    }
  learner_created: true
- name: src/cinema/Room.java
  visible: true
  text: |
    package cinema;

    import java.util.ArrayList;

    public class Room {
        private ArrayList<Seats> seats = new ArrayList<>();

        public Room() {
            for (int i = 1; i < 10; i++) {
                for (int j = 1; j < 10; j++) {
                    seats.add(new Seats(i, j));
                }
            }

        }
        public ArrayList<Seats> getSeats() {
            return seats;
        }

        public ArrayList<Seats> getAvailableSeats(){
            ArrayList<Seats> availableSeats = new ArrayList<>();
            for(int i = 0 ; i < seats.size() ; i++){
                if(!seats.get(i).isPurchased()){
                    availableSeats.add(seats.get(i));
                }
            }
            return availableSeats;
        }

    }
  learner_created: true
- name: src/cinema/Exceptions/ApiException.java
  visible: true
  text: |
    package cinema.Exceptions;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.http.HttpStatus;

    public class ApiException {
        private String error;
        @JsonIgnore
        private HttpStatus status; //maybe use it later.

        public ApiException(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public HttpStatus getStatus() {
            return status;
        }

        public void setStatus(HttpStatus status) {
            this.status = status;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/Exceptions/ApiExceptionHandler.java
  visible: true
  text: |
    package cinema.Exceptions;

    import org.springframework.core.Ordered;
    import org.springframework.core.annotation.Order;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.HttpMediaTypeNotAcceptableException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    //this class will give us control over what the user sees when an exception is thrown.
    //*it didn't work in the beginning because the apiException class didn't have getter and setters.
    @ControllerAdvice()
    public class ApiExceptionHandler extends ResponseEntityExceptionHandler {
        @ExceptionHandler(value =  ThisSeatIsAllreadyBoughtException.class)
        public ResponseEntity<Object> handleApiRequastException(ThisSeatIsAllreadyBoughtException exception){
            ApiException apiException = new ApiException(exception.getMessage());
            return new ResponseEntity<>(apiException , HttpStatus.BAD_REQUEST );
        }

    //   @ExceptionHandler(value = SeatOutOfBoundsException.class)
    //    public ResponseEntity<Object> handleApiRequastException2(SeatOutOfBoundsException exception){
    //       ApiException apiException = new ApiException(exception.getMessage());
    //       return new ResponseEntity<>(apiException , HttpStatus.BAD_REQUEST );
    //   }

    }
  learner_created: true
- name: src/cinema/Exceptions/SeatOutOfBoundsException.java
  visible: true
  text: |+
    package cinema.Exceptions;

    public class SeatOutOfBoundsException extends RuntimeException {
        public SeatOutOfBoundsException(String cause){
            super(cause);
        }

        public SeatOutOfBoundsException(String message, Throwable cause) {
            super(message, cause);
        }
    }


  learner_created: true
- name: src/cinema/returnedTicket.java
  visible: true
  learner_created: true
- name: src/cinema/Token.java
  visible: true
  learner_created: true
- name: src/cinema/Exceptions/WrongTokenException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 05 Oct 2022 03:13:21 UTC
record: 3
